#include <stdio.h>
#include <stdlib.h>
// write your code here 
struct node{
int data;
struct node *next;
};
typedef struct node *NODE;
NODE createNodeInCLL(){
	NODE temp;
	temp=(NODE)malloc(sizeof(struct node));
		temp->next=NULL;
		return temp;
}
NODE insertEnd(NODE first,int x){
	NODE temp,lastNode=first;
	temp=createNodeInCLL();
	temp->data=x;
	if(first==NULL)
		first=temp;
	else{
		while(lastNode->next!=first)
			lastNode=lastNode->next;
		lastNode->next=temp;
	}
	temp->next=first;
	return first;
}
	
void displayList(NODE first){
	NODE temp = first;
	if(first == NULL)
		printf("Circular Linked List is empty\n");
	else{
		do{
			printf("%d ",temp->data);
			temp=temp->next;
			
		}while(temp!=first);
		printf("\n");
	}
}
NODE concatenateLists(NODE list1,NODE list2){
	NODE temp1=list1,temp2=list2;
	if(temp1==NULL){
		temp1=temp2;
		printf("Nothing to concatenate\n");
		return list1;
	}if(temp2==NULL){
		printf("Nothing to concatenate\n");
		return list2;
	}while(temp1->next!=list1)
		temp1=temp1->next;
	while(temp2->next!=list2)
		temp2=temp2->next;
	temp1->next=list2;
	while(temp2->next!=list2)
		temp2=temp2->next;
	temp1->next=list2;
		temp2->next=list1;
	printf("Lists concatenated.\n");
	return list1;
}


int main() {
    NODE head1 = NULL, head2 = NULL;
    int choice, data;

    do {
        printf("1. Create Circular Linked List 1\n");
        printf("2. Create Circular Linked List 2\n");
        printf("3. Display Circular Linked List 1\n");
        printf("4. Display Circular Linked List 2\n");
        printf("5. Concatenate Lists\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert into List 1 (-1 to stop): ");
                scanf("%d", &data);
                while (data != -1) {
                    head1 = insertEnd(head1, data);
                    scanf("%d", &data);
                }
                break;
            case 2:
                printf("Enter data to insert into List 2 (-1 to stop): ");
                scanf("%d", &data);
                while (data != -1) {
                    head2 = insertEnd(head2, data);
                    scanf("%d", &data);
                }
                break;
            case 3:
                printf("Circular Linked List 1: ");
                displayList(head1);
                break;
            case 4:
                printf("Circular Linked List 2: ");
                displayList(head2);
                break;
            case 5:
                head1 = concatenateLists(head1, head2);
                break;
            case 6:
                printf("Exiting\n");
                break;
            default:
                printf("Invalid choice\n");
        }
    } while (choice != 6);

    return 0;
}
